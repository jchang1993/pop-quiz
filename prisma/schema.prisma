// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())

  accounts      Account[]
  sessions      Session[]
  quizzes       Quiz[]
  answers       Answer[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Quiz application models
model Quiz {
  id          String     @id @default(cuid())
  title       String
  description String?
  published   Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  creatorId   String
  shareableId String     @unique @default(cuid())

  creator     User       @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  questions   Question[]
  answers     Answer[]
}

model Question {
  id            String   @id @default(cuid())
  quizId        String
  question      String
  questionImage String?  // Base64 encoded image
  options       String   // JSON string array of options
  optionImages  String?  // JSON string array of base64 images
  correctAnswer String
  order         Int
  createdAt     DateTime @default(now())

  quiz     Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers  Answer[]
}

model Answer {
  id         String   @id @default(cuid())
  quizId     String
  questionId String
  userId     String
  answer     String
  isCorrect  Boolean
  createdAt  DateTime @default(now())

  quiz       Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([questionId, userId])
}
